Open Scope list_scope.

(* Pair *)

Inductive is_even : nat -> Prop :=
| is_even_O: is_even 0
| is_even_S: forall n : nat, is_even n -> is_even (S (S n)).

Fixpoint even (n :  nat) : Prop :=
match n with
| 0 => True
| 1 => False
|(S (S n)) => even n
end.

Functional Scheme even_ind := Induction for even Sort Prop.

Theorem even_sound :
forall (n : nat) (v : Prop), (even n) = True -> is_even n.

Proof.
  do 2 intro.
  functional induction (even n) using even_ind; intros.
  apply is_even_O.
  elimtype False; rewrite H; auto.
  apply is_even_S; apply IHP; assumption.
Qed.
(* Factorielle *)

Inductive is_fact : nat -> nat -> Prop :=
| is_fact_O : is_fact 0 1
| is_fact_S : forall n : nat, forall s : nat,  is_fact n s -> is_fact (S n) (s * (S n)).

Fixpoint fact (n : nat) : nat :=
match n with
| 0 => 1
| (S n) => fact n * (S n)
end.

Functional Scheme fact_ind := Induction for fact Sort Prop.

Theorem fact_sound :
forall (n : nat) (s : nat), (fact n) = s -> is_fact n s.
Proof.
  intro.
  functional induction (fact n) using fact_ind; intros.
  elim H.
  apply is_fact_O.
  elim H.
  apply is_fact_S.
  apply (IHn0(fact n0)).
  reflexivity.
Qed.

(* Liste *)

Inductive is_perm : (list nat) -> (list nat) -> Prop :=
| is_perm_reflexive : forall l1 : (list nat) , is_perm l1 l1
| is_perm_transitivite : forall l1 l2 l3 : (list nat), is_perm l1 l2 -> is_perm l2 l3 -> is_perm l1 l3
| is_perm_symetrie : forall l1 l2 : (list nat), is_perm l1 l2 -> is_perm l2 l1
| is_perm_cons : forall l1 l2 : (list nat), forall a : nat , is_perm l1 l2 -> is_perm (a::l1) (a::l2)
| is_perm_append : forall l1 : (list nat),  forall a : nat , is_perm (a::l1) ( l1++ a::nil).

Require Import List.
Definition l1 := 1::2::3::nil.
Definition l2 := 3::2::1::nil.

Lemma perm_p: is_perm  l1 l2.
Proof.
unfold l1.
unfold l2.
apply (is_perm_transitivite (1::(2::(3::nil))) ((2::(3::nil))++(1::nil)) ((3::(2::(1::nil))))).
apply is_perm_append.
simpl.
apply (is_perm_transitivite (2::(3::(1::nil))) ((3::(1::nil))++(2::nil)) ((3::(2::(1::nil))))).
apply is_perm_append.
simpl.
apply is_perm_cons.
apply (is_perm_transitivite (1::(2::nil)) ((1::nil)++(2::nil)) (2::(1::nil))).
simpl.
apply is_perm_cons.
apply is_perm_reflexive.
apply is_perm_append.
Qed.

Require Import Omega.

Inductive is_sort : (list nat) -> Prop :=
| is_sort_O : is_sort nil
| is_sort_1 : forall n : nat, is_sort (n::nil)
| is_sort_N : forall n m : nat, forall l : (list nat) , n <= m -> is_sort(m::l) -> is_sort(n::m::l).

Lemma sort_p : is_sort l1.
Proof.
unfold l1.
apply is_sort_N.
omega.
apply is_sort_N.
omega.
apply is_sort_1.

Fixpoint insertion (x : nat) (l : (list nat)) : (list nat) := 
match l with 
| nil => x::nil
| h::tl => match le_dec x h with
       | left _ => x::h::tl
       | right _ => h::(insertion x tl)
       end
end.

Fixpoint sort (l : (list nat)) : (list nat) :=
match l with
| nil => nil
| h::t => (insertion h (sort t))
end.


Theorem permute_inter : 
forall (a : nat) (a0 : nat) (l0 : (list nat)), is_perm(a :: a0 :: l0) (a0 :: a :: l0).
Proof.
intros.
apply (is_perm_transitivite (a :: a0 :: l0) (a0 :: l0 ++ a::nil) (a0 :: a :: l0)). 
apply is_perm_append.
apply is_perm_cons.
apply is_perm_symetrie.
apply is_perm_append.
Qed.



Theorem is_perm_inter :
forall (a : nat) (l : (list nat)),  is_perm (a::l) (insertion a l).
Proof.
intros.
elim l;simpl.
apply is_perm_append.
intros.
elim (le_dec a a0).
intros.
apply is_perm_reflexive.
intros.
eapply (is_perm_transitivite (a :: a0 :: l0) (a0 :: a :: l0) (a0 :: (insertion a l0))).
Focus 2.
apply is_perm_cons.
assumption.
apply permute_inter. 
Qed.

Theorem correction_sound : 
forall (l : (list nat)) (l' : (list nat)), (sort l) = l' -> (is_perm l l') /\ (is_sort l').
Proof.
intros.
rewrite <- H.
induction l.
simpl.
split.
apply is_perm_reflexive.
apply is_sort_O.

split.
eapply is_perm_transitivite.
eapply is_perm_append.








